<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ID Card Editor</title>
  <style>
    .print-container {
      display: flex;
      flex-wrap: wrap;
    }

    @media print {
      @page {
        size: A4;
        margin: 10px;
      }

      body * {
        visibility: hidden;
      }

      .print-container,
      .print-container * {
        visibility: visible;
      }

      .print-container {
        position: static;
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        gap: 6mm;
        justify-content: center;
      }

      .id-card {
        box-shadow: none !important;
        border: 1px solid #2a4d60;
        border-radius: 0;
        margin: 0;
        page-break-inside: avoid;
      }

      .print-btn {
        display: none;
      }
    }

    .id-card {
      width: 8.56cm;
      height: 5.4cm;
      padding: 0.3cm;
      background: white;
      border-radius: 6px;
      box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    .id-header {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .logo {
      width: 1.3cm;
      height: 1.3cm;
      object-fit: contain;
    }

    .school-name {
      font-size: 10pt;
      font-weight: 600;
      color: #2a4d60;
    }

    .address {
      font-size: 7pt;
      color: #555;
    }

    .heading {
      background-color: #2a4d60;
      color: white;
      font-size: 8pt;
      padding: 4px;
      text-align: center;
      font-weight: bold;
    }

    .id-body {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
    }

    .details {
      font-size: 7pt;
      line-height: 1.7;
      flex: 1;
    }

    .detail-row {
      margin-bottom: 2px;
      align-items: center;
      min-height: 1.2em;
    }

    .detail-label {
      width: 2.2cm;
      font-weight: 600;
      font-size: 1.1em;
      letter-spacing: 0.5px;
      color: #d32f2f;
    }

    .colon {
      width: 0.2cm;
    }

    .detail-value {
      flex: 1;
      font-size: 1.4em;
      letter-spacing: 0.2px;
      padding-left: 0.2cm;
      font-weight: bold;
    }

    .photo-signature {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 2px;
    }

    .student-photo {
      width: 1.75cm;
      height: 1.75cm;
      border: 1px solid #2a4d60;
      border-radius: 50%;
      object-fit: cover;
    }

    .signature {
      width: 1.6cm;
      height: auto;
    }

    .principal-label {
      font-size: 7pt;
      font-weight: 600;
    }

    .print-button-container {
      text-align: center;
      margin: 20px 0;
    }

    .controls {
      margin: 10px;
    }
  </style>
</head>

<body>
  <div class="controls">
    <label>Add Field(s):</label>
    <div id="multi-select-fields" style="display:inline-block; position:relative;">
      <button type="button" onclick="toggleFieldDropdown()" style="padding:4px 10px;">Select Fields ▼</button>
      <div id="field-dropdown" style="display:none; position:absolute; background:#fff; border:1px solid #ccc; z-index:10; padding:8px; min-width:160px; box-shadow:0 2px 8px rgba(0,0,0,0.08);">
        <label><input type="checkbox" value="Name"> Name</label><br>
        <label><input type="checkbox" value="Class"> Class</label><br>
        <label><input type="checkbox" value="Section"> Section</label><br>
        <label><input type="checkbox" value="Roll No."> Roll No.</label><br>
        <label><input type="checkbox" value="Father's Name"> Father's Name</label><br>
        <label><input type="checkbox" value="Mother's Name"> Mother's Name</label><br>
        <label><input type="checkbox" value="Mobile"> Mobile</label><br>
        <label><input type="checkbox" value="Address"> Address</label><br>
        <label><input type="checkbox" value="DOB"> DOB</label><br>
        <label><input type="checkbox" value="House"> House</label><br>
        <button type="button" onclick="closeFieldDropdown()" style="margin-top:6px;">Close</button>
      </div>
    </div>
    <button onclick="addSelectedFields()">Add</button>
    <button onclick="togglePhotoShape()">Toggle Photo Shape</button>
    <button id="toggleDeleteBtn" onclick="toggleDeleteMode()">Delete Field</button>
    <button id="editFieldsBtn" onclick="enableEditMode()">Edit</button>
    <button id="saveFieldsBtn" onclick="saveFieldEdits()" style="display:none;">Save</button>
  </div>

  <div class="print-container">
    <% studentsWithQr.forEach(({ student, qrCode }, cardIdx) => { %>
      <div class="id-card">
        <div class="id-header">
          <img src="<%= school && school.logo ? school.logo : '' %>" alt="Logo" class="logo" />
          <div>
            <div class="school-name"><%= school && school.schoolName ? school.schoolName : '' %></div>
            <div class="address"><%= school && school.address ? school.address : '' %></div>
          </div>
        </div>
        <div class="heading">IDENTITY CARD - SESSION 2025–2026</div>
        <div class="id-body">
          <div class="details"></div>
          <div class="photo-signature">
            <img src="<%= student.photo %>" alt="Student" class="student-photo" />
            <img src="<%= school && school.signature ? school.signature : '' %>" alt="Principal Signature" class="signature" />
            <div class="principal-label">PRINCIPAL</div>
          </div>
        </div>
      </div>
    <% }); %>
  </div>

  <div class="print-button-container">
    <button class="print-button" onclick="window.print()">Print</button>
  </div>

  <script>
    let globalFields = [];
    let cardFieldValues = {};
    const fieldKeyMap = {
      "Name": "name",
      "Class": "class",
      "Section": "section",
      "Roll No.": "rollNo",
      "Father's Name": "fathername",
      "Mother's Name": "mothername",
      "Mobile": "contact",
      "Address": "address",
      "DOB": "dob",
      "House": "house"
    };
    let deleteMode = false;
    let editMode = false;

    function toggleFieldDropdown() {
      const dropdown = document.getElementById('field-dropdown');
      dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
    }

    function closeFieldDropdown() {
      document.getElementById('field-dropdown').style.display = 'none';
    }

    function addSelectedFields() {
      const checkboxes = document.querySelectorAll('#field-dropdown input[type=checkbox]:checked');
      checkboxes.forEach(cb => {
        const selectedField = cb.value;
        const key = fieldKeyMap[selectedField] || selectedField.toLowerCase().replace(/[^a-z0-9]/g, '_');
        // Prevent duplicate fields
        if (!globalFields.some(f => f.key === key)) {
          globalFields.push({ label: selectedField, key });
        }
      });
      // Uncheck all after adding
      document.querySelectorAll('#field-dropdown input[type=checkbox]').forEach(cb => cb.checked = false);
      closeFieldDropdown();
      renderFieldsOnAllCards();
    }

    function toggleDeleteMode() {
      deleteMode = !deleteMode;
      renderFieldsOnAllCards();
    }

    function enableEditMode() {
      editMode = true;
      document.getElementById('editFieldsBtn').style.display = 'none';
      document.getElementById('saveFieldsBtn').style.display = '';
      renderFieldsOnAllCards();
    }

    function saveFieldEdits() {
      editMode = false;
      document.getElementById('editFieldsBtn').style.display = '';
      document.getElementById('saveFieldsBtn').style.display = 'none';
      renderFieldsOnAllCards();
    }

    function renderFieldsOnAllCards() {
      const cards = document.querySelectorAll('.id-card');
      cards.forEach((card, cardIdx) => {
        const detailsDiv = card.querySelector('.details');
        detailsDiv.innerHTML = '';
        if (!cardFieldValues[cardIdx]) cardFieldValues[cardIdx] = {};
        globalFields.forEach((field, idx) => {
          let value = cardFieldValues[cardIdx][field.key];
          if (typeof value === 'undefined') {
            const studentData = window.studentsWithQr && window.studentsWithQr[cardIdx] ? window.studentsWithQr[cardIdx].student : {};
            value = studentData[field.key] || '';
            if (field.key === 'dob' && value) {
              try { value = new Date(value).toLocaleDateString(); } catch {}
            }
          }
          const row = document.createElement('div');
          row.className = 'detail-row';
          row.innerHTML = `
            <span class="detail-label" contenteditable="${editMode ? 'true' : 'false'}" ${editMode ? `onblur="updateFieldLabel(${idx}, this.innerText)"` : ''}>${field.label}</span>
            <span class="colon">:</span>
            <span class="detail-value" contenteditable="${editMode ? 'true' : 'false'}" ${editMode ? `onblur="updateFieldValue(${cardIdx}, '${field.key}', this.innerText)"` : ''}>${value}</span>
            ${deleteMode ? `<button type="button" class="remove-field-btn" style="margin-left:8px; color:#fff; background:#d9534f; border:none; border-radius:3px; padding:2px 8px; cursor:pointer; font-size:12px;" onclick="removeField(${idx})">Delete</button>` : ''}
          `;
          detailsDiv.appendChild(row);
        });
      });
    }

    function removeField(idx) {
      globalFields.splice(idx, 1);
      renderFieldsOnAllCards();
    }

    function updateFieldLabel(idx, newLabel) {
      globalFields[idx].label = newLabel;
      renderFieldsOnAllCards();
    }

    function updateFieldValue(cardIdx, key, newValue) {
      if (!cardFieldValues[cardIdx]) cardFieldValues[cardIdx] = {};
      cardFieldValues[cardIdx][key] = newValue;
    }

    function togglePhotoShape() {
      const photos = document.querySelectorAll('.student-photo');
      photos.forEach(photo => {
        photo.style.borderRadius = photo.style.borderRadius === '50%' ? '0%' : '50%';
      });
    }

    window.studentsWithQr = JSON.parse('<%- JSON.stringify(studentsWithQr || []) %>');
  </script>
</body>

</html>